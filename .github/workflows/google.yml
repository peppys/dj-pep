# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to Cloud Run when a release is created
# This will also deploy the static website to Netlify

name: Build and Deploy to Cloud Run and Netlify

on:
  release:
    types: [created]

# Environment variables available to all jobs and steps in this workflow
env:
  GOOGLE_PROJECT: ${{ secrets.GOOGLE_PROJECT }}
  GOOGLE_SERVICE_ACCOUNT_EMAIL: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_EMAIL }}
  GOOGLE_SERVICE_ACCOUNT_KEY: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}
  CLOUD_RUN_SERVICE: ${{ secrets.CLOUD_RUN_SERVICE }}
  NETLIFY_ACCESS_TOKEN: ${{ secrets.NETLIFY_ACCESS_TOKEN }}
  REACT_APP_FIREBASE_API_KEY: ${{ secrets.REACT_APP_FIREBASE_API_KEY }}
  REACT_APP_FIREBASE_AUTH_DOMAIN: ${{ secrets.REACT_APP_FIREBASE_AUTH_DOMAIN }}
  REACT_APP_FIREBASE_DATABASE_URL: ${{ secrets.REACT_APP_FIREBASE_DATABASE_URL }}
  REACT_APP_GOOGLE_PROJECT_ID: ${{ secrets.REACT_APP_GOOGLE_PROJECT_ID }}
  REACT_APP_FIREBASE_STORAGE_BUCKET: ${{ secrets.REACT_APP_FIREBASE_STORAGE_BUCKET }}
  REACT_APP_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.REACT_APP_FIREBASE_MESSAGING_SENDER_ID }}
  REACT_APP_FIREBASE_APP_ID: ${{ secrets.REACT_APP_FIREBASE_APP_ID }}
  REACT_APP_PHONE_NUMBER: ${{ secrets.REACT_APP_PHONE_NUMBER }}
  NETLIFY_SITE: ${{ secrets.NETLIFY_SITE }}
  GITHUB_SHA: ${{ github.sha }}
  GITHUB_RELEASE_TAG: ${{ github.event.release.tag_name }}
  IMAGE: dj-pep-api
  REGISTRY_HOSTNAME: us.gcr.io

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v2

      # Setup gcloud CLI
      - uses: google-github-actions/setup-gcloud@master
        with:
          version: '285.0.0'
          service_account_email: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_EMAIL }}
          service_account_key: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}

      # Configure docker to use the gcloud command-line tool as a credential helper
      - run: |
          # Set up docker to authenticate
          # via gcloud command-line tool.
          gcloud auth configure-docker

      # Build the Docker image
      - name: Build
        run: |
          docker build -t "$REGISTRY_HOSTNAME/$GOOGLE_PROJECT/$IMAGE:$GITHUB_SHA" \
            -t "$REGISTRY_HOSTNAME/$GOOGLE_PROJECT/$IMAGE:$GITHUB_RELEASE_TAG" \
            -t "$REGISTRY_HOSTNAME/$GOOGLE_PROJECT/$IMAGE:latest" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" ./backend

      # Push the Docker image to Google Container Registry
      - name: Publish
        run: |
          docker push --all-tags $REGISTRY_HOSTNAME/$GOOGLE_PROJECT/$IMAGE

      # Deploy the Docker image to the Cloud Run service
      - name: Deploy API
        run: |
          gcloud run deploy $CLOUD_RUN_SERVICE --image $REGISTRY_HOSTNAME/$GOOGLE_PROJECT/$IMAGE:${GITHUB_SHA} --platform managed --project $GOOGLE_PROJECT --region us-central1

      # Build and deploy the static website to Netlify
      - name: Deploy Web
        run: |
          cd web-app
          yarn install
          yarn build
          yarn export
          zip -vr website.zip out
          curl -H "Content-Type: application/zip" \
                         -H "Authorization: Bearer $NETLIFY_ACCESS_TOKEN" \
                         --data-binary "@website.zip" \
                         "https://api.netlify.com/api/v1/sites/$NETLIFY_SITE/deploys"
